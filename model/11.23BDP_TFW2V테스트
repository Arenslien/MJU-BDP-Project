{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNFXDm3/+CXMzZcAoKD/2Xj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"05wkqD6bgWKv"},"outputs":[],"source":["from google.colab import drive\n","import pandas as pd\n","\n","# Google Drive 마운트\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["!pip install gensim\n","\n","import pandas as pd\n","import numpy as np\n","from gensim.models import Word2Vec\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","\n","# CSV 파일 읽기\n","file_path = '/content/drive/My Drive/BDPgo/paper_CS.csv'\n","df = pd.read_csv(file_path, encoding='utf-8', nrows=100000)  # 373042행에서 에러나서 10만개만 읽어옴\n","\n","# 논문 초록 열 선택 (컬럼 이름을 실제 데이터프레임에 있는 열 이름으로 변경해야 합니다)\n","abstracts = df['Abstract'].astype(str).tolist()\n","\n","# 사용자가 입력한 논문의 abstract\n","user_paper_abstract = \"This study aims to present an adaptive audio watermarking method using ideas of wavelet-based entropy (WBE). The method converts low-frequency coefficients of discrete wavelet transform (DWT) into the WBE domain, followed by the calculations of mean values of each audio as well as derivation of some essential properties of WBE. A characteristic curve relating the WBE and DWT coefficients\"\n","\n","# TF-IDF 변환\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(abstracts)\n","\n","transformer = TfidfTransformer()\n","tfidf_matrix = transformer.fit_transform(X)\n","\n","# Word2Vec 모델 학습\n","sentences = [abstract.split() for abstract in abstracts]\n","w2v_model = Word2Vec(sentences, vector_size=100, window=5, min_count=1, workers=4)\n","\n","# 사용자가 입력한 논문의 abstract를 단어로 나누기\n","user_paper_words = user_paper_abstract.split()\n","\n","# 각 단어에 대한 Word2Vec 벡터 구하기\n","user_paper_vectors = [w2v_model.wv.get_vector(word) for word in user_paper_words if word in w2v_model.wv.key_to_index]\n","\n","# 사용자가 입력한 논문의 벡터 계산 (단어 벡터의 평균)\n","user_paper_vector = np.mean(user_paper_vectors, axis=0)\n","\n","# 사용자가 입력한 논문과 가장 유사한 논문 찾기\n","user_paper_similarities = w2v_model.wv.most_similar(positive=[user_paper_vector], topn=5)\n","\n","# 가장 유사한 논문의 정보 출력 (author, title, abstract)\n","most_similar_paper_info = df[df['Abstract'].str.contains(user_paper_similarities[0][0])][['Authors', 'Title', 'Abstract']]\n","print(\"가장 유사한 논문의 정보:\")\n","display(most_similar_paper_info)"],"metadata":{"id":"aupQ1wbIge3w"},"execution_count":null,"outputs":[]}]}